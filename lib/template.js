// Generated by LiveScript 1.2.0
var controller, lodash, ConfigurationError, NotImplementedError, template, x$;
controller = require('./base').controller;
lodash = require('lodash');
ConfigurationError = require('./exceptions').ConfigurationError;
NotImplementedError = require('./exceptions').NotImplementedError;
template = module.exports;
template.contextMixin = {
  context: function(extraContext){
    var ctx;
    extraContext == null && (extraContext = {});
    ctx = {
      controller: this
    };
    return import$(ctx, extraContext);
  }
};
template.templateResponseMixin = {
  view: null,
  contentType: 'text/html',
  render: function(context){
    var view, type, this$ = this;
    context == null && (context = {});
    if (this.view == null) {
      throw new ConfigurationError('No view defined');
    }
    view = lodash.result(this, 'view');
    type = lodash.result(this, 'contentType');
    return this.res.render(view, context, function(err, content){
      if (err != null) {
        return this$.next(err);
      } else {
        this$.res.set('Content-Type', type);
        return this$.res.send(200, content);
      }
    });
  }
};
x$ = template.templateController = clone$(controller);
import$(x$, template.templateResponseMixin);
import$(x$, template.contextMixin);
import$(x$, {
  allowedMethods: ['get'],
  textResponse: function(data){
    return this.render(this.context(data));
  }
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function clone$(it){
  function fun(){} fun.prototype = it;
  return new fun;
}