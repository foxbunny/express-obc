// Generated by LiveScript 1.2.0
var ConfigurationError, NotImplementedError, base, VALID_METHODS, VALID_FORMATS;
ConfigurationError = require('./exceptions').ConfigurationError;
NotImplementedError = require('./exceptions').NotImplementedError;
base = module.exports;
VALID_METHODS = ['get', 'post', 'put', 'patch', 'delete', 'head', 'copy', 'options'];
VALID_FORMATS = ['json', 'jsonp', 'xml', 'text'];
base.controller = {
  path: null,
  allowedMethods: VALID_METHODS,
  allowedFormats: VALID_FORMATS,
  formatParameter: 'format',
  get: function(){
    throw new NotImplementedError('overload `get` in subclass');
  },
  post: function(){
    throw new NotImplementedError('overload `post` in subclass');
  },
  put: function(){
    throw new NotImplementedError('overload `put` in subclass');
  },
  patch: function(){
    throw new NotImplementedError('overload `patch` in subclass');
  },
  'delete': function(){
    throw new NotImplementedError('overload `delete` in subclass');
  },
  head: function(){
    throw new NotImplementedError('overload `head` in subclass');
  },
  copy: function(){
    throw new NotImplementedError('overload `copy` in subclass');
  },
  options: function(){
    var v;
    this.res.set({
      'Content-Length': '0',
      'Content-Type': 'text/plain',
      'Allow': (function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = this.allowedMethods).length; i$ < len$; ++i$) {
          v = ref$[i$];
          results$.push(v.toUpperCase());
        }
        return results$;
      }.call(this)).join(', ')
    });
    this.res.send(200);
  },
  notSupported: function(){
    this.res.send(405, 'Method not supported');
  },
  requestMethodName: function(){
    return this.req.route.method.toLowerCase();
  },
  requestFormat: function(){
    var accepts, ref$, ref1$, format, canJson, canJsonp, canXml;
    accepts = (ref$ = this.req.accepts) != null ? (ref1$ = ref$[0]) != null ? ref1$.value : void 8 : void 8;
    format = (ref$ = this.req.params) != null ? ref$[this.formatParameter] : void 8;
    canJson = in$('json', this.allowedFormats);
    canJsonp = in$('jsonp', this.allowedFormats);
    canXml = in$('xml', this.allowedFormats);
    if (format != null) {
      if (canJson && format === 'json') {
        return 'json';
      } else if (canJsonp && format === 'jsonp') {
        return 'jsonp';
      } else if (canXml && format === 'xml') {
        return 'xml';
      } else {
        return 'text';
      }
    } else if (accepts != null) {
      if (canJson && accepts === 'application/json') {
        return 'json';
      } else if (canJsonp && accepts === 'text/javascript') {
        return 'jsonp';
      } else if (canXml && accepts === 'application/xml') {
        return 'xml';
      } else {
        return 'text';
      }
    } else {
      return 'text';
    }
  },
  dispatch: function(){
    var verb;
    verb = this.requestMethodName();
    if (!in$(verb, this.allowedMethods)) {
      this.notSupported();
      return;
    }
    if (this[verb] != null) {
      this[verb]();
    } else {
      throw new ConfigurationError("No handler method for " + verb);
    }
  },
  respond: function(err, data){
    if (err != null) {
      return this.next(err);
    }
    return this[this.requestFormat() + "Response"](data);
  },
  jsonResponse: function(data){
    return this.res.json(200, data);
  },
  jsonpResponse: function(data){
    return this.res.jsonp(200, data);
  },
  xmlResponse: function(data){
    this.res.set('Content-Type', 'application/xml');
    return this.res.send(200, data.toXml());
  },
  textResponse: function(data){
    return this.res.send(200, data + "");
  },
  handle: function(req, res, next){
    var x$, o;
    x$ = o = clone$(this);
    x$.req = req;
    x$.res = res;
    x$.next = next;
    x$.dispatch();
    return x$;
  },
  route: function(app){
    var i$, ref$, len$, verb, format;
    if (this.allowedMethods.length === 0) {
      throw new ConfigurationError("No allowed methods specified");
    }
    for (i$ = 0, len$ = (ref$ = this.allowedMethods).length; i$ < len$; ++i$) {
      verb = ref$[i$];
      if (!in$(verb, VALID_METHODS)) {
        throw new ConfigurationError(verb + " is not a valid HTTP verb");
      }
    }
    if (this.allowedFormats.length === 0) {
      throw new ConfigurationError("No allowed response formats specified");
    }
    for (i$ = 0, len$ = (ref$ = this.allowedFormats).length; i$ < len$; ++i$) {
      format = ref$[i$];
      if (!in$(format, VALID_FORMATS)) {
        throw new ConfigurationError(format + " is not a valid response format");
      }
    }
    if (this.path == null) {
      throw new ConfigurationError("No path defined for this controller");
    }
    app.all(this.path, this.handle);
  }
};
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function clone$(it){
  function fun(){} fun.prototype = it;
  return new fun;
}